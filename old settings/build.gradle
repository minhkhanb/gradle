import org.apache.tools.ant.taskdefs.condition.Os
buildscript 
{
    System.properties['com.android.build.gradle.overrideVersionCheck'] = 'true'
    repositories 
    { 
        jcenter()
        mavenCentral()
    }
    dependencies 
    {
		classpath 'com.google.gms:google-services:3.1.0'
		classpath 'com.android.tools.build:gradle:2.3.3'
		classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.2'
		classpath 'com.github.dcendents:android-maven-gradle-plugin:1.3'
	}
}
allprojects {
      repositories {
          jcenter()
		  maven {
			  url 'https://jitpack.io'
		  }
		  maven {
			  url "https://maven.google.com"
		  }
          maven {
              url "http://repo.gamesparks.net/mvn"
          }
		  maven {
			  url  "https://adcolony.bintray.com/AdColony"
		  }
      }
    }
apply plugin: 'com.android.application'
repositories 
{
    mavenCentral()
    
    flatDir() {
        dirs 'libs'
    }
}
android 
{
    compileSdkVersion project.ANDROID_BUILD_SDK_VERSION.toInteger()
    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION
    useLibrary 'org.apache.http.legacy'
    defaultConfig 
    {
        applicationId "pine.game." + project.GAME_NAME
        versionCode project.GAME_VERSION_CODE.toInteger()
        versionName project.GAME_VERSION_NAME
        
        minSdkVersion project.ANDROID_BUILD_MIN_SDK_VERSION.toInteger()
        targetSdkVersion project.ANDROID_BUILD_TARGET_SDK_VERSION.toInteger()
        multiDexEnabled true
        
        ndk {
            moduleName "pine_framework"
        }
    }

	splits {
		abi {
			enable true
			reset()
			include 'armeabi'
		}
	}
    
    aaptOptions {
        noCompress 'pack'
    }
    
    sourceSets 
    {
        main 
        {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            
            //jni
            jni.srcDirs = []
            jniLibs.srcDir 'libs'
        }
    }
	
	task copyPineEngine(type: Copy){
		from(new File(getProjectDir(), '../game/Lib/PineEngine/_android')) { include '**/*.so' }
		//from '../game/Lib/PineEngine/_android/*.so'
		into 'libs/armeabi'
	}

	task copyFreeType(type: Copy){
		from '../game/Lib/FreeType/_android/libFreeType.so'
		into 'libs/armeabi'
	}
	
	task copyBoost(type: Copy){
		from '../game/Lib/PineEngine/_android/libboost_armeabi.a'
		into 'libs/armeabi'
	}
	
	task copySSL(type: Copy){
		from '../game/Lib/PineEngine/_android/libssl.a'
		into 'libs/armeabi'
	}
	
	task buildNative(type: Exec, description: 'Compile JNI source via NDK') {
		
		if (Os.isFamily(Os.FAMILY_WINDOWS)) {
			commandLine "ndk-build.cmd", '-C', file('jni').absolutePath
		}else{
			commandLine "ndk-build",'-C', file('jni').absolutePath
		}
		doLast{
			println "begin copy"
			copyFreeType.execute()
			copyPineEngine.execute()
			//copyBoost.execute()
			//copySSL.execute()
			println "end copy"
		}
    }
    task cleanNative(type: Exec, description: 'Clean JNI object files') {
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            commandLine "ndk-build.cmd",
                '-C', file('jni').absolutePath, 
                'clean'
        }else{
            commandLine "ndk-build",
                '-C', file('jni').absolutePath, 
                'clean'
        }
        
        
    }
    
    clean.dependsOn 'cleanNative'
    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn buildNative
    }
    
    buildTypes 
    {
        release 
        {
            //minifyEnabled true
            //proguardFiles getDefaultProguardFile('proguard-android.txt'),'proguard-rules.pro'
            debuggable false
            jniDebuggable false
            renderscriptDebuggable false
            zipAlignEnabled true
        }
        debug 
        {
            debuggable true
        }
    }
	
	dependencies 
	{
		compile fileTree(dir: 'libs', include: ['*.jar'])
		compile 'com.google.android.gms:play-services:11.2.2'
		compile 'com.google.firebase:firebase-core:11.2.2'
		compile 'com.google.firebase:firebase-ads:11.2.2'
		compile 'com.facebook.android:facebook-android-sdk:[4,5)'
		compile 'com.gamesparks.sdk:gamesparks-android-client-sdk:0.2.3'
		compile(name:'unity-ads', ext:'aar')
		compile(name:'unity3d_ad', ext:'aar')
		compile(name:'VungleAdapter', ext:'aar')  // Vungle Adapter for AdMob
		//compile(name:'unity-2.1.0.0', ext:'aar')  // Unity Adapter for AdMob
		compile 'com.google.ads.mediation:unity:2.1.0.0'
		compile 'com.google.ads.mediation:chartboost:7.0.0.0'
		compile 'com.github.vungle:vungle-android-sdk:5.1.0'
		compile 'com.adcolony:sdk:3.1.2'
		compile 'com.google.ads.mediation:adcolony:3.1.2.0'
	}

	android.applicationVariants.all { variant ->
		variant.outputs.each { output ->
			if (output.zipAlign) {
				def fileName = "\\"  + project.GAME_NAME + "-" + variant.buildType.name
				fileName += "-v" + project.GAME_VERSION_NAME + "." + project.GAME_VERSION_CODE
				def file = output.outputFile
				if(file.name.find("unsigned")) 
				{
					fileName += "-unsigned";
				}
				fileName += ".apk"
				output.outputFile = new File(file.parent, fileName)
			}
			
			def fileName = "\\"  + project.GAME_NAME + "-" + variant.buildType.name
			fileName += "-v" + project.GAME_VERSION_NAME + "." + project.GAME_VERSION_CODE
			def file = output.packageApplication.outputFile
			if(file.name.find("unaligned")) 
			{
				fileName += "-unaligned";
			}
			if(file.name.find("unsigned")) 
			{
				fileName += "-unsigned";
			}
			fileName += ".apk"
			output.packageApplication.outputFile = new File(file.parent, fileName)
		}
	}
	
    lintOptions {
        abortOnError false
    }
}
apply plugin: 'com.google.gms.google-services'